#include "services.fcl"
#include "SingleGen.fcl"
#include "TextFileGen.fcl"
#include "G4Gen.fcl"
#include "ReadoutSim.fcl"
#include "ImprovedTransport.fcl"
#include "OccupiedSpillFilter.fcl"
#include "Metadata.fcl"
#include "MergeTBDaqCollections.fcl"
#include "CalHit.fcl"
#include "Slicer4D.fcl"
#include "TDSlicer.fcl"
#include "SliceMergeViews.fcl"


process_name: SingleParticle
services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "text_hist.root" closeFileFast: false }
  TimeTracker: {}
  RandomNumberGenerator: {} #ART native random number generator
  @table::standard_services
}
# Edit here to generate in a different detector. See Geometry.fcl
services.Geometry: @local::tb_geo

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   10000       # Number of events to create
  firstRun:    1000001     # Run number to use for this file
  firstSubRun: 1           # Subrun number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen
   # generator: @local::standard_singlep
   ### generator: @local::multi_singlep
   geantgen: @local::standard_geant4
   photrans: @local::standard_photrans
   daqv4: @local::tbv4_rsim
   daqv5: @local::tbv5_rsim
   daq: @local::standard_tbdaqmerge
   rns: { module_type: "RandomNumberSaver" }
   calhit: @local::standard_calhit
   slicer: @local::standard_slicer4d
   slicer2d: @local::standard_td
   slicer: @local::standard_slicemergeviews
 }

 filters:
 {
   occupied:  @local::standard_occupiedspillfilter
 }

 analyzers:
 {
   metadata: @local::standard_metadata
 }

 #list the modules for this path, order matters, filters reject all following items
 # simulate: [ generator, geantgen, photrans, daqv4, daqv5, daq, rns, occupied ]
 simulate: [ generator, geantgen, photrans, daqv4, daqv5, daq, rns, occupied, calhit, slicer2d, slicer ]

 stream1:  [ metadata, out1 ] #could have multiple paths

 #things that modify the art::Event, filters and producers go here
 trigger_paths: [ simulate ]

 #end_path are things that do not modify art::Event,
 #includes analyzers and output modules. all items here can be run simultaneously
 end_paths:     [ stream1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: [XXX]
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "text_gen.root" #default file name, can override from command line with -o or --output
    SelectEvents: [ simulate ]
#    outputCommands: [ "keep *",
#                      "drop *_daqv4_*_*",
#                      "drop *_daqv5_*_*" ]
  }
}

physics.producers.daqv4.tb.ForceGain: 100
physics.producers.daqv5.tb.ForceGain: 100
physics.producers.daqv4.tb.NumClockticksInSpill: 800
physics.producers.daqv5.tb.NumClockticksInSpill: 800
services.Geometry.ForceUseFCLOnly: true
services.Geometry.GDML: "Geometry/gdml/testbeam-2x2-2block-xtru-vacuum-new.gdml"
services.RunHistory.AbortIfNoMask: false
